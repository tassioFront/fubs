version: '3.8'

services:
  # PostgreSQL Database for Sugarfoot Service
  sugarfoot-db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: sugarfoot_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - sugarfoot_db_data:/var/lib/postgresql/data
      - ./apps/sugarfoot/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network

  # Sugarfoot Service (Node.js + NestJS)
  sugarfoot-service:
    build:
      context: .
      dockerfile: apps/sugarfoot/Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      USERS_SERVICE_URL: http://localhost:8000
      API_TITLE: "Sugarfoot Service API"
      API_DESCRIPTION: "API for managing workspaces, projects, and team members"
      API_VERSION: "1.0.0"
    depends_on:
      - sugarfoot-db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for Tasks Service
  tasks-db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: tasks_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - tasks_db_data:/var/lib/postgresql/data
      - ./apps/tasks/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network

  # Tasks Service (Node.js + NestJS)
  tasks-service:
    build:
      context: .
      dockerfile: apps/tasks/Dockerfile
    restart: unless-stopped
    ports:
      - "4000:4000"
    depends_on:
      - tasks-db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sugarfoot-service
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

volumes:
  sugarfoot_db_data:
  tasks_db_data:
  redis_data:

networks:
  microservices-network:
    name: fubs_microservices-network
    driver: bridge
