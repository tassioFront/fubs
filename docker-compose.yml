version: '3.8'

services:
  # PostgreSQL Database for Projects Service
  projects-db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: projects_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - projects_db_data:/var/lib/postgresql/data
      - ./apps/projects/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network

  # Projects Service (Node.js + NestJS)
  projects-service:
    build:
      context: .
      dockerfile: apps/projects/Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@projects-db:5432/projects_db?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret}
      JWT_EXPIRES_IN: 7d
      USERS_SERVICE_URL: http://users-service:8000
      API_TITLE: "Projects Service API"
      API_DESCRIPTION: "API for managing projects, tasks, and milestones"
      API_VERSION: "1.0.0"
    depends_on:
      - projects-db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - projects-service
    networks:
      - microservices-network

volumes:
  projects_db_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge
