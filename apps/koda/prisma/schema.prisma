// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/@prisma/client-koda"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  priority TaskPriority @default(MEDIUM)
  dueDate  DateTime?

  projectId     String
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy     String
  createdByUser User          @relation("CreatedByUser", fields: [createdBy], references: [id], onDelete: Cascade)
  assignedTo    String?
  assignedUser  User?         @relation("AssignedUser", fields: [assignedTo], references: [id], onDelete: SetNull)
  comments      TaskComment[]

  @@map("tasks")
}

model User {
  id            String        @id @default(uuid())
  assignedTasks Task[]        @relation("AssignedUser")
  createdTasks  Task[]        @relation("CreatedByUser")
  comments      TaskComment[] @relation("CreatedByUser")

  @@map("users")
}

model Project {
  id          String    @id
  tasks       Task[]
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Workspace {
  id       String            @id @default(uuid())
  ownerId  String
  members  WorkspaceMember[]
  projects Project[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@map("workspace_members")
}

model TaskComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId        String
  task          Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy     String
  createdByUser User   @relation("CreatedByUser", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("task_comments")
}
