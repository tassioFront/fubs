
generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/@prisma/client-stitch"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum SubscriptionStatus {
  TRIALING            @map("trialing")
  ACTIVE              @map("active")
  PAST_DUE            @map("past_due")
  CANCELED            @map("canceled")
  UNPAID              @map("unpaid")
  INCOMPLETE          @map("incomplete")
  INCOMPLETE_EXPIRED  @map("incomplete_expired")
  PAUSED              @map("paused")
}


model SubscriptionEntitlement {
  id                   String   @id @default(uuid())
  ownerId              String
  planType             PlanType
  stripeCustomerId     String?
  stripeSubscriptionId String?  @unique
  stripePriceId        String?
  status               SubscriptionStatus @default(ACTIVE)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  expiresAt            DateTime

  @@index([ownerId])
  @@index([stripeCustomerId])
  @@index([status, expiresAt])
}


enum PlanType {
  FREE
  SOLO
  ENTERPRISE
}

model WebhookEvent {
  id         String   @id @default(uuid())
  type       String
  payload    String
  processed  Boolean  @default(false)
  receivedAt DateTime @default(now())
}


model Outbox {
  id          String   @id @default(uuid())
  type        String
  payload     String
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  processedAt DateTime?

  @@index([processed])

}

enum BillingPeriod {
  MONTH @map("month")
  YEAR  @map("year")
}

model Plan {
  id             String   @id @default(uuid())
  type           PlanType
  name           String
  description    String
  priceCents     Int
  workspaceLimit Int?
  features       String[]
  billingPeriod  String   // 'month' or 'year'
  stripeProductId String?
  stripePriceId   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Customer {
  id                String   @id @default(uuid())
  ownerId           String
  name              String
  email             String  @unique
  stripeCustomerId  String? @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([ownerId])
  @@index([stripeCustomerId])
}
