// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/@prisma/client-sugarfoot"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // External reference to users-service (UUID from users-service)
  ownerId String

  // Relations
  projects Project[]
  members  WorkspaceMember[]

  @@map("workspaces")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // List of task IDs from Koda service
  taskIds       String[]
  ProjectMember ProjectMember[]

  @@map("projects")
}

model WorkspaceMember {
  id       String              @id @default(uuid())
  role     WorkspaceMemberRole @default(member)
  joinedAt DateTime            @default(now())

  // External reference to users-service (UUID from users-service)
  userId String

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum WorkspaceMemberRole {
  admin
  member
  owner
}

model ProjectMember {
  id       String            @id @default(uuid())
  role     ProjectMemberRole @default(member)
  joinedAt DateTime          @default(now())

  // External reference to users-service (UUID from users-service)
  userId String

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

enum ProjectMemberRole {
  admin
  member
  owner
}

model Outbox {
  id          String   @id @default(uuid())
  type        String
  payload     String
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  processedAt DateTime?
}

model Subscription {
  id                            String             @id @default(uuid())
  subscriptionId                String
  ownerId                       String
  planType                      String
  status                        SubscriptionStatus
  expiresAt                     DateTime
  createdAt                     DateTime           @default(now())
  updatedAt                     DateTime           @updatedAt

  @@index([ownerId])
  @@index([status])
  @@index([subscriptionId])
  @@unique([subscriptionId])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAUSED
}
